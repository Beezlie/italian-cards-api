{"version":3,"sources":["../../src/models/usersModel.js"],"names":["mongoose","usersSchema","Users","model","checkExisting","username","match","findOne"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAEA,MAAMC,KAAK,GAAGF,QAAQ,CAACG,KAAT,CAAe,OAAf,EAAwBF,WAAxB,CAAd;AAEA,eAAeC,KAAf;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeE,aAAf,CAA6BC,QAA7B,EAAuC;AAC1C,QAAMC,KAAK,GAAG,MAAMJ,KAAK,CAACK,OAAN,CAAc;AAAEF,IAAAA;AAAF,GAAd,CAApB;AACA,SAAOC,KAAP;AACH","sourcesContent":["import mongoose from 'mongoose';\r\nimport usersSchema from '../schema/users.js';\r\n\r\nconst Users = mongoose.model('Users', usersSchema);\r\n\r\nexport default Users;\r\n\r\n/**\r\n * Checks if username already exists\r\n * @param {username} username\r\n * @returns {(boolean|Object)} True if doc existing, false otherwise\r\n */\r\nexport async function checkExisting(username) {\r\n    const match = await Users.findOne({ username });\r\n    return match;\r\n}"],"file":"usersModel.js"}