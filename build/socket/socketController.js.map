{"version":3,"sources":["../../src/socket/socketController.js"],"names":["Server","redisAdapter","consola","verifyToken","config","Room","fixedOrigin","ALLOWLIST_HOSTS","REDIS_PORT","REDIS_HOST","app","io","transports","path","cors","rememberUpgrade","adapter","host","port","Number","error","warn","info","classicMode","of","use","verifySocket","on","socket","username","roomId","password","action","options","handshake","query","room","joinedRoom","init","showPlayers","isReady","shiftTurn","onDisconnect","next","token","decoded"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,MAAM;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA,UAAnB;AAA+BC,EAAAA;AAA/B,IAA8CL,MAApD;;AAEA,MAAMM,GAAG,GAAGA,GAAG,IAAI;AACf,QAAMC,EAAE,GAAG,IAAIX,MAAJ,CAAWU,GAAX,EAAgB;AACvBE,IAAAA,UAAU,EAAE,CAAC,WAAD,CADW;AACI;AAC3BC,IAAAA,IAAI,EAAE,eAFiB;AAGvBC,IAAAA,IAAI,EAAER,WAAW,CAACC,eAAD,CAHM;AAIvBQ,IAAAA,eAAe,EAAE;AAJM,GAAhB,CAAX;;AAOA,MAAI;AACA,UAAMC,OAAO,GAAGf,YAAY,CAAC;AAAEgB,MAAAA,IAAI,EAAER,UAAR;AAAoBS,MAAAA,IAAI,EAAEC,MAAM,CAACX,UAAD;AAAhC,KAAD,CAA5B;AACAG,IAAAA,EAAE,CAACK,OAAH,CAAWA,OAAX;AACH,GAHD,CAGE,OAAOI,KAAP,EAAc;AACZlB,IAAAA,OAAO,CAACmB,IAAR,CAAa,wDAAb;AACAnB,IAAAA,OAAO,CAACmB,IAAR,CAAaD,KAAb;AACH;;AAEDlB,EAAAA,OAAO,CAACoB,IAAR,CAAa,uBAAb;AAEA,QAAMC,WAAW,GAAGZ,EAAE,CAACa,EAAH,CAAM,eAAN,CAApB;AACAD,EAAAA,WAAW,CAACE,GAAZ,CAAgBC,YAAhB,EAA8BC,EAA9B,CAAiC,YAAjC,EAA+C,MAAMC,MAAN,IAAgB;AAC3D,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,MAAZ;AAAoBC,MAAAA,QAApB;AAA8BC,MAAAA,MAA9B;AAAsCC,MAAAA;AAAtC,QAAkDL,MAAM,CAACM,SAAP,CAAiBC,KAAzE;AACA,UAAMC,IAAI,GAAG,IAAI/B,IAAJ,CAAS;AAAEM,MAAAA,EAAE,EAAEY,WAAN;AAAmBK,MAAAA,MAAnB;AAA2BC,MAAAA,QAA3B;AAAqCC,MAAAA,MAArC;AAA6CC,MAAAA,QAA7C;AAAuDC,MAAAA,MAAvD;AAA+DC,MAAAA;AAA/D,KAAT,CAAb;AAEA,UAAMI,UAAU,GAAG,MAAMD,IAAI,CAACE,IAAL,CAAUT,QAAV,CAAzB;AACA3B,IAAAA,OAAO,CAACoB,IAAR,CAAa,kBAAb;;AAEA,QAAIe,UAAJ,EAAgB;AACZD,MAAAA,IAAI,CAACG,WAAL;AACAH,MAAAA,IAAI,CAACI,OAAL;AACAJ,MAAAA,IAAI,CAACK,SAAL;AACH;;AAEDL,IAAAA,IAAI,CAACM,YAAL;AACH,GAdD;AAgBA,SAAO/B,EAAP;AACH,CApCD;;AAsCA,MAAMe,YAAY,GAAG,CAACE,MAAD,EAASe,IAAT,KAAkB;AACnC,MAAIf,MAAM,CAACM,SAAP,CAAiBC,KAAjB,IAA0BP,MAAM,CAACM,SAAP,CAAiBC,KAAjB,CAAuBS,KAArD,EAA4D;AACxD,UAAMC,OAAO,GAAG1C,WAAW,CAACyB,MAAM,CAACM,SAAP,CAAiBC,KAAjB,CAAuBS,KAAxB,CAA3B;AACAhB,IAAAA,MAAM,CAACiB,OAAP,GAAiBA,OAAjB;AACAF,IAAAA,IAAI;AACP;AACJ,CAND;;AAQA,eAAejC,GAAf","sourcesContent":["import { Server } from 'socket.io';\r\nimport redisAdapter from 'socket.io-redis';\r\nimport consola from 'consola';\r\n\r\nimport { verifyToken } from '../middlewares/index.js';\r\nimport { config } from '../config.js';\r\nimport Room from './roomManager.js';\r\nimport { fixedOrigin } from './corsFixer.js';\r\n\r\nconst { ALLOWLIST_HOSTS, REDIS_PORT, REDIS_HOST } = config;\r\n\r\nconst app = app => {\r\n    const io = new Server(app, {\r\n        transports: ['websocket'], // To avoid sticky sessions when using multiple servers\r\n        path: '/classic-mode',\r\n        cors: fixedOrigin(ALLOWLIST_HOSTS),\r\n        rememberUpgrade: true,\r\n    });\r\n\r\n    try {\r\n        const adapter = redisAdapter({ host: REDIS_HOST, port: Number(REDIS_PORT) });\r\n        io.adapter(adapter);\r\n    } catch (error) {\r\n        consola.warn('Start redis docker container using `docker-compose up`');\r\n        consola.warn(error);\r\n    }\r\n\r\n    consola.info('Socketio initialised!');\r\n\r\n    const classicMode = io.of('/classic-mode');\r\n    classicMode.use(verifySocket).on('connection', async socket => {\r\n        const { username, roomId, password, action, options } = socket.handshake.query;\r\n        const room = new Room({ io: classicMode, socket, username, roomId, password, action, options });\r\n\r\n        const joinedRoom = await room.init(username);\r\n        consola.info('Client Connected');\r\n\r\n        if (joinedRoom) {\r\n            room.showPlayers();\r\n            room.isReady();\r\n            room.shiftTurn();\r\n        }\r\n\r\n        room.onDisconnect();\r\n    });\r\n\r\n    return io;\r\n};\r\n\r\nconst verifySocket = (socket, next) => {\r\n    if (socket.handshake.query && socket.handshake.query.token) {\r\n        const decoded = verifyToken(socket.handshake.query.token);\r\n        socket.decoded = decoded;\r\n        next();\r\n    }\r\n};\r\n\r\nexport default app;"],"file":"socketController.js"}