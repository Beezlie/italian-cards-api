{"version":3,"sources":["../../src/socket/roomManager.js"],"names":["bcrypt","consola","Server","Socket","Adapter","config","SALT_ROUNDS","DEFAULT_MAX_PLAYERS","DEFAULT_MAX_TIMER","Room","constructor","options","io","socker","socket","username","roomId","password","action","store","adapter","maxPlayersLimit","maxTimerLimit","JSON","parse","init","clients","in","allSockets","error","debug","rooms","get","size","compare","info","emit","join","push","id","isReady","warn","hash","showPlayers","to","playersJoined","showTeams","teams","draft","on","player","arePlayersReady","every","beginDraft","shufflePlayers","_resetCurrentGame","_emitTurn","shiftTurn","item","undefined","turnNum","_resetTimeOut","_nextTurn","endDraft","j","x","i","length","Math","floor","random","currentTurnNumber","_triggerTimeout","timeOut","setTimeout","clearTimeout","sTime","Date","stringify","onDisconnect","filter"],"mappings":"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","sourcesContent":["import bcrypt from 'bcrypt';\r\nimport consola from 'consola';\r\n// eslint-disable-next-line no-unused-vars\r\nimport { Server, Socket } from 'socket.io';\r\n// eslint-disable-next-line no-unused-vars\r\nimport { Adapter } from 'socket.io-adapter';\r\n\r\nimport { config } from '../config.js';\r\n\r\nconst { SALT_ROUNDS, DEFAULT_MAX_PLAYERS, DEFAULT_MAX_TIMER } = config;\r\n\r\nexport default class Room {\r\n    constructor(options) {\r\n        /** @type { Server } */\r\n        this.io = options.io; // Shortname for -> io.of('/your_namespace_here')\r\n        /** @type { Socket } */\r\n        this.socker = options.socket;\r\n        this.username = options.username;\r\n        this.roomId = options.roomId;\r\n        this.password = options.password; // Optional\r\n        this.action = options.action; // [join, create]\r\n        /** @type { Adapter } */\r\n        this.store = options.io.adapter; // Later expanded to io.adapter.rooms[roomId]\r\n        this.options = {\r\n            maxPlayersLimit: DEFAULT_MAX_PLAYERS,\r\n            maxTimerLimit: DEFAULT_MAX_TIMER,\r\n        };\r\n        if (!options.options) {\r\n            this.options = JSON.parse(options.options);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialises steps on first connection.\r\n     *\r\n     * Checks if room available:\r\n     *   If yes, then joins the room\r\n     *   If no, then creates new room.\r\n     *\r\n     * @access    public\r\n     * @return   {bool}    Returns true if initialization is successfull, false otherwise\r\n     */\r\n    async init(username) {\r\n        // Stores an array containing socket ids in 'roomId'\r\n        const clients = await this.io.in(this.roomId).allSockets();\r\n        if (!clients) {\r\n            consola.error('[INTERNAL ERROR] Room creation failed!');\r\n        }\r\n\r\n        consola.debug(`Connected Clients are: ${clients}`);\r\n\r\n        if (this.action === 'join') {\r\n            // @optional Check if correct password for room\r\n            // Check if room size is equal to or more than 1\r\n            //     If yes, join the socket to the room\r\n            //     If not, emit 'invalid operation: room does not exist'\r\n\r\n            this.store = this.store.rooms.get(this.roomId);\r\n            if (clients.size > 0) {\r\n                if (this.store.password && !(await bcrypt.compare(this.password, this.store.password))) {\r\n                    consola.info(`[JOIN FAILED] Incorrect password for room ${this.roomId}`);\r\n                    this.socker.emit('Error: Incorrect password!');\r\n                    return false;\r\n                }\r\n\r\n                await this.socker.join(this.roomId);\r\n                this.store.clients.push({ id: this.socker.id, username, isReady: false });\r\n                this.socker.username = username;\r\n                this.socker.emit('[SUCCESS] Successfully initialised', {\r\n                    roomId: this.roomId,\r\n                    password: this.password,\r\n                    options: this.options,\r\n                });\r\n                consola.info(`[JOIN] Client joined room ${this.roomId}`);\r\n                return true;\r\n            }\r\n\r\n            consola.warn(`[JOIN FAILED] Client denied join, as roomId ${this.roomId} not created`);\r\n            this.socker.emit('Error: Create a room first!');\r\n            return false;\r\n        }\r\n\r\n        if (this.action === 'create') {\r\n            // Check if room size is equal to zero\r\n            //     If yes, create new room and join socket to the room\r\n            //     If not, emit 'invalid operation: room already exists'\r\n\r\n            if (clients.size === 0) {\r\n                await this.socker.join(this.roomId);\r\n                this.store = this.store.rooms.get(this.roomId);\r\n\r\n                if (this.password) {\r\n                    this.store.password = await bcrypt.hash(this.password, SALT_ROUNDS);\r\n                }\r\n\r\n                this.store.clients = [{ id: this.socker.id, username, isReady: false }];\r\n\r\n                this.socker.username = username;\r\n                consola.info(`[CREATE] Client created and joined room ${this.roomId}`);\r\n                this.socker.emit('[SUCCESS] Successfully initialised', {\r\n                    roomId: this.roomId,\r\n                    password: this.password,\r\n                    options: this.options,\r\n                });\r\n                return true;\r\n            }\r\n\r\n            consola.warn(`[CREATE FAILED] Client denied create, as roomId ${this.roomId} already present`);\r\n            this.socker.emit('Error: Room already created. Join the room!');\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Broadcast info about all players and their ready status joined to given room. Deafult status as 'Not ready'.\r\n     *\r\n     * @access    public\r\n     */\r\n    showPlayers() {\r\n        const { clients } = this.store;\r\n        this.io.to(this.roomId).emit('show-players-joined', { playersJoined: clients });\r\n    }\r\n\r\n    /**\r\n     * Broadcast Array of Teams [player_socket_id: [playerId1, playerId2]].\r\n     *\r\n     * @access    public\r\n     */\r\n    showTeams() {\r\n        const { teams } = this.store.draft;\r\n        this.io.to(this.roomId).emit('show-players-teams', { teams });\r\n    }\r\n\r\n    /**\r\n     * Mark player as ready  ---> to start the draft in the given room. If all players ready then initiate the draft\r\n     *\r\n     * @access public\r\n     */\r\n    isReady() {\r\n        this.socker.on('is-ready', () => {\r\n            for (const player of this.store.clients) {\r\n                if (player.id === this.socker.id) {\r\n                    player.isReady = true;\r\n                }\r\n            }\r\n\r\n            this.showPlayers();\r\n\r\n            const arePlayersReady = this.store.clients.every(player => player.isReady === true);\r\n            if (arePlayersReady) {\r\n                this.beginDraft();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initiates the draft, by resetting the game -> emitting initial turn\r\n     *\r\n     * @access    public\r\n     */\r\n    beginDraft() {\r\n        this.store.clients = this.shufflePlayers(this.store.clients);\r\n        this.showPlayers();\r\n        this.io.to(this.roomId).emit('draft-start', 'The players order is shuffled and the draft has started...');\r\n        consola.info('Draft started...');\r\n\r\n        // Reset draft object to initial state\r\n        this._resetCurrentGame();\r\n\r\n        this._emitTurn(0);\r\n        this.showTeams();\r\n    }\r\n\r\n    /**\r\n     * Consume player item and update the gameState. Reset the timeout and initiate next turn.\r\n     *\r\n     * @access    public\r\n     */\r\n    shiftTurn() {\r\n        this.socker.on('player-turn-pass', (item = undefined) => {\r\n            // NAME Change: player-turn-trigger would be better name\r\n            if (this.store.clients[this.store.draft.turnNum].id === this.socker.id) {\r\n                // Add the selected item object to the collection\r\n                if (item) {\r\n                    this.store.draft.teams[this.socker.id] = [...(this.store.draft.teams[this.socker.id] || []), item];\r\n                }\r\n\r\n                this._resetTimeOut();\r\n                this._nextTurn();\r\n            }\r\n\r\n            this.showTeams();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Emit End current draft event\r\n     *\r\n     * @access    public\r\n     */\r\n    endDraft() {\r\n        // TODO: Save the teams in DB as a collection\r\n        this.io.to(this.roomId).emit('draft-end', 'The draft has ended');\r\n    }\r\n\r\n    /**\r\n     * Shuffle the players ready in a given room in random order.\r\n     * Uses Fisher-Yates shuffle algorithm\r\n     *\r\n     * @param        {Array}    clients    Original clients list from this.store.clients\r\n     * @return       {Array}               Shuffled order of this.store.clients\r\n     */\r\n    shufflePlayers(clients) {\r\n        // Shuffle the order of players and return a new order\r\n        let j;\r\n        let x;\r\n        let i;\r\n\r\n        for (i = clients.length - 1; i > 0; i--) {\r\n            j = Math.floor(Math.random() * (i + 1));\r\n            x = clients[i];\r\n            clients[i] = clients[j];\r\n            clients[j] = x;\r\n        }\r\n\r\n        return clients;\r\n    }\r\n\r\n    _nextTurn() {\r\n        this.io\r\n            .to(this.roomId)\r\n            .emit('player-turn-end', `${this.store.clients[this.store.draft.turnNum].username} chance ended`);\r\n        this.io.to(this.store.clients[this.store.draft.turnNum].id).emit('personal-turn-end', 'Your chance ended');\r\n\r\n        consola.info(`[TURN CHANGE] ${this.store.clients[this.store.draft.turnNum].username} had timeout turn change`);\r\n\r\n        const currentTurnNumber = (this.store.draft.turnNum + 1) % this.store.clients.length;\r\n        this.store.draft.turnNum = currentTurnNumber;\r\n\r\n        this._emitTurn(currentTurnNumber);\r\n    }\r\n\r\n    _emitTurn(currentTurnNumber) {\r\n        this.io.to(this.store.clients[currentTurnNumber].id).emit('personal-turn-start', 'It is your chance to pick');\r\n        this.io.to(this.roomId).emit('player-turn-start', `${this.store.clients[currentTurnNumber].username} is picking`);\r\n        consola.info(\r\n            `[TURN CHANGE] ${this.store.clients[currentTurnNumber].username} is the new drafter. Turn number: ${currentTurnNumber}`\r\n        );\r\n        this._triggerTimeout();\r\n    }\r\n\r\n    _triggerTimeout() {\r\n        this.store.draft.timeOut = setTimeout(() => {\r\n            this._nextTurn();\r\n        }, this.store.draft.maxTimerLimit);\r\n    }\r\n\r\n    _resetTimeOut() {\r\n        if (typeof this.store.draft?.timeOut === 'object') {\r\n            consola.info('[TURN CHANGE] Timeout reset');\r\n            clearTimeout(this.store.draft.timeOut);\r\n        }\r\n    }\r\n\r\n    _resetCurrentGame() {\r\n        if (this.store) {\r\n            this._resetTimeOut();\r\n            this.store.draft = {\r\n                teams: {},\r\n                sTime: new Date(),\r\n                timeOut: 0,\r\n                turnNum: 0,\r\n                maxPlayersLimit: this.options.maxPlayersLimit,\r\n                maxTimerLimit: this.options.maxTimerLimit,\r\n            };\r\n        }\r\n\r\n        if (this.options) {\r\n            consola.info(`[USER-CONFIG] ${JSON.stringify(this.options)}`);\r\n        } else {\r\n            consola.info(`[DEFAULT-CONFIG] ${JSON.stringify(this.options)}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gracefully disconnect the user from the game and end the draft\r\n     * Preserving the gameState\r\n     *\r\n     * @access    public\r\n     */\r\n    onDisconnect() {\r\n        this.socker.on('disconnect', () => {\r\n            try {\r\n                this.store.clients = this.store.clients.filter(player => player.id !== this.socker.id);\r\n                this.showPlayers();\r\n\r\n                // Handle game reset\r\n                this._resetTimeOut();\r\n                this.endDraft();\r\n                this._resetCurrentGame();\r\n            } catch {\r\n                consola.info('[FORCE DISCONNECT] Server closed forcefully');\r\n            }\r\n\r\n            consola.info('Client Disconnected!');\r\n        });\r\n    }\r\n}"],"file":"roomManager.js"}